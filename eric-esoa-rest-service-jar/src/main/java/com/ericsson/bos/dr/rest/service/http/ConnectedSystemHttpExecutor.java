/*******************************************************************************
 * COPYRIGHT Ericsson 2023
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 ******************************************************************************/

package com.ericsson.bos.dr.rest.service.http;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import io.netty.handler.ssl.SslContext;

/**
 * Executes HTTP requests towards systems whose connection properties are onboarded in Subsystem Manager.
 * These systems can be either internal or external to the D&R cluster.
 * <p>
 *     If the "ssl.verify" connection property is false then unsecured communication will be used.
 *     If the "ssl.verify" connection property is true and the "ssl.trustStoreSecretName" connection property is set to 'internal' then
 *     communication will be secured using the certs and keys generated by the SIP-TLS service. This communication would be towards internal services.
 *     If the "ssl.verify" connection property is true and the "ssl.trustStoreSecretName" connection property is not set to 'internal' then
 *     communication will be secured using the certs and keys in the referenced secrets. This communication would be towards external services.
 * </p>
 */
@Component("connected_system")
public class ConnectedSystemHttpExecutor extends HttpExecutor {

    @Autowired
    private UnsecuredSslCtx unsecuredSslCtx;

    @Autowired
    private InternalSipTlsSslCtx internalSipTlsSslCtx;

    @Autowired
    private ExternalSslCtx externalSslCtx;

    /**
     * Returns the SslContext for communication.
     *
     * @param httpRequest
     *         http request properties
     * @return SslContext
     */
    protected SslContext configureSslContext(final HttpRequest httpRequest) {
        if (Boolean.FALSE.equals(httpRequest.getSslVerify())) {
            return unsecuredSslCtx.get();
        } else if ("internal".equalsIgnoreCase(httpRequest.getTrustStoreSecretName())) {
            return internalSipTlsSslCtx.get();
        } else {
            return externalSslCtx.get(httpRequest);
        }
    }
}
